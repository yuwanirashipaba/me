{"status":"ok","feed":{"url":"https://medium.com/feed/@Yuwanirashipaba","title":"Stories by Yuwanirashipaba on Medium","link":"https://medium.com/@yuwanirashipaba?source=rss-b546b55ffd16------2","author":"","description":"Stories by Yuwanirashipaba on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/0*TitgsiJadC0ieuK0"},"items":[{"title":"Types of Software Testing: A Comprehensive Guide for QA Professionals","pubDate":"2025-05-31 05:16:41","link":"https://medium.com/@yuwanirashipaba/types-of-software-testing-a-comprehensive-guide-for-qa-professionals-e72c25134265?source=rss-b546b55ffd16------2","guid":"https://medium.com/p/e72c25134265","author":"Yuwanirashipaba","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bhil9_XDR0yQEMHRTsgU5w.jpeg\"></figure><p>Software testing is a cornerstone of Quality Assurance (QA), ensuring that applications meet specified requirements, function correctly, and deliver a seamless user experience. But testing isn\u2019t a one-size-fits-all process\u200a\u2014\u200ait involves a variety of techniques, each designed to catch different types of issues at different stages of development.</p>\n<p>In this article, we\u2019ll explore the major types of software testing, both manual and automated, functional and non-functional. Whether you\u2019re a budding QA engineer or a seasoned tester, understanding these testing types is essential for building robust and reliable software.</p>\n<h3>1. <strong>Unit\u00a0Testing</strong>\n</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>Unit testing involves testing individual components or functions of the software in isolation.</p>\n<h4>\u2705 Performed by:</h4>\n<p>Usually developers, during the development phase.</p>\n<h4>\ud83d\udee0\ufe0f Tools:</h4>\n<p>JUnit, NUnit,\u00a0TestNG</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Testing a function that calculates the sum of two numbers to ensure it handles positive, negative, and zero values correctly.</p>\n<h3>2. <strong>Integration Testing</strong>\n</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>This checks the interaction between integrated modules or components to ensure they work together as expected.</p>\n<h4>\u2705 Performed by:</h4>\n<p>Developers or QA engineers.</p>\n<h4>\ud83d\udee0\ufe0f Tools:</h4>\n<p>JUnit (for API), Postman,\u00a0SoapUI</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Verifying the interaction between the login form and the authentication database.</p>\n<h3>3. <strong>System\u00a0Testing</strong>\n</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>System testing evaluates the entire application as a whole to verify that it meets the specified requirements.</p>\n<h4>\u2705 Performed by:</h4>\n<p>QA team</p>\n<h4>\ud83d\udee0\ufe0f Tools:</h4>\n<p>Selenium, QTP, TestComplete</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Testing an e-commerce checkout process end-to-end.</p>\n<h3>4. <strong>Acceptance Testing</strong>\n</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>Also known as User Acceptance Testing (UAT), this validates the system against business requirements.</p>\n<h4>\u2705 Performed by:</h4>\n<p>End users or stakeholders</p>\n<h4>\ud83d\udee0\ufe0f Tools:</h4>\n<p>TestRail, Zephyr,\u00a0Cucumber</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Business stakeholders testing if a new reporting feature delivers the correct financial data.</p>\n<h3>5. <strong>Smoke\u00a0Testing</strong>\n</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>A quick round of basic tests to ensure the major functions of the application work after a new\u00a0build.</p>\n<h4>\u2705 Performed by:</h4>\n<p>QA team (manual or automated)</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Launching the application to confirm it opens and basic navigation works.</p>\n<h3>6. <strong>Sanity\u00a0Testing</strong>\n</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>A focused form of testing to verify that a particular bug fix or feature update is working as intended.</p>\n<h4>\u2705 Performed by:</h4>\n<p>QA team</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>After fixing a login issue, testing only the login module to confirm the\u00a0fix.</p>\n<h3>7. <strong>Regression Testing</strong>\n</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>Re-running previous test cases to ensure that new changes haven\u2019t broken existing functionality.</p>\n<h4>\u2705 Performed by:</h4>\n<p>QA team (manual or automated)</p>\n<h4>\ud83d\udee0\ufe0f Tools:</h4>\n<p>Selenium, Katalon\u00a0Studio</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Testing shopping cart and checkout after updating the product listing\u00a0feature.</p>\n<h3>8. <strong>Performance Testing</strong>\n</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>This type evaluates how the application performs under different conditions like load and\u00a0stress.</p>\n<h4>\u2705 Performed by:</h4>\n<p>Performance testers</p>\n<h4>\ud83d\udee0\ufe0f Tools:</h4>\n<p>JMeter, LoadRunner, Gatling</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Testing how many users the website can handle before response time starts to\u00a0degrade.</p>\n<h3>9. Security\u00a0Testing</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>Ensures the application is secure from threats like data breaches, unauthorized access, and other vulnerabilities.</p>\n<h4>\u2705 Performed by:</h4>\n<p>Security testing specialists</p>\n<h4>\ud83d\udee0\ufe0f Tools:</h4>\n<p>OWASP ZAP, Burp\u00a0Suite</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Testing for SQL injection vulnerabilities in a login\u00a0form.</p>\n<h3>10. Usability Testing</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>Evaluates how user-friendly, intuitive, and accessible the application is.</p>\n<h4>\u2705 Performed by:</h4>\n<p>End users, designers, QA</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Observing users navigating an app to complete a task like booking a\u00a0flight.</p>\n<h3>11. Compatibility Testing</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>Ensures the software works across different browsers, operating systems, and\u00a0devices.</p>\n<h4>\u2705 Performed by:</h4>\n<p>QA team</p>\n<h4>\ud83d\udee0\ufe0f Tools:</h4>\n<p>BrowserStack, CrossBrowserTesting</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Testing a mobile app on Android and iOS devices to ensure consistent functionality.</p>\n<h3>Final Thoughts</h3>\n<p>Understanding the various types of software testing empowers QA professionals to apply the right technique at the right time. Each type plays a critical role in the overall quality assurance process\u200a\u2014\u200afrom catching bugs early to ensuring an excellent end-user experience.</p>\n<p>Whether you\u2019re building your career in QA or just looking to level up your testing knowledge, mastering these testing types is a great step\u00a0forward.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e72c25134265\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bhil9_XDR0yQEMHRTsgU5w.jpeg\"></figure><p>Software testing is a cornerstone of Quality Assurance (QA), ensuring that applications meet specified requirements, function correctly, and deliver a seamless user experience. But testing isn\u2019t a one-size-fits-all process\u200a\u2014\u200ait involves a variety of techniques, each designed to catch different types of issues at different stages of development.</p>\n<p>In this article, we\u2019ll explore the major types of software testing, both manual and automated, functional and non-functional. Whether you\u2019re a budding QA engineer or a seasoned tester, understanding these testing types is essential for building robust and reliable software.</p>\n<h3>1. <strong>Unit\u00a0Testing</strong>\n</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>Unit testing involves testing individual components or functions of the software in isolation.</p>\n<h4>\u2705 Performed by:</h4>\n<p>Usually developers, during the development phase.</p>\n<h4>\ud83d\udee0\ufe0f Tools:</h4>\n<p>JUnit, NUnit,\u00a0TestNG</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Testing a function that calculates the sum of two numbers to ensure it handles positive, negative, and zero values correctly.</p>\n<h3>2. <strong>Integration Testing</strong>\n</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>This checks the interaction between integrated modules or components to ensure they work together as expected.</p>\n<h4>\u2705 Performed by:</h4>\n<p>Developers or QA engineers.</p>\n<h4>\ud83d\udee0\ufe0f Tools:</h4>\n<p>JUnit (for API), Postman,\u00a0SoapUI</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Verifying the interaction between the login form and the authentication database.</p>\n<h3>3. <strong>System\u00a0Testing</strong>\n</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>System testing evaluates the entire application as a whole to verify that it meets the specified requirements.</p>\n<h4>\u2705 Performed by:</h4>\n<p>QA team</p>\n<h4>\ud83d\udee0\ufe0f Tools:</h4>\n<p>Selenium, QTP, TestComplete</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Testing an e-commerce checkout process end-to-end.</p>\n<h3>4. <strong>Acceptance Testing</strong>\n</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>Also known as User Acceptance Testing (UAT), this validates the system against business requirements.</p>\n<h4>\u2705 Performed by:</h4>\n<p>End users or stakeholders</p>\n<h4>\ud83d\udee0\ufe0f Tools:</h4>\n<p>TestRail, Zephyr,\u00a0Cucumber</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Business stakeholders testing if a new reporting feature delivers the correct financial data.</p>\n<h3>5. <strong>Smoke\u00a0Testing</strong>\n</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>A quick round of basic tests to ensure the major functions of the application work after a new\u00a0build.</p>\n<h4>\u2705 Performed by:</h4>\n<p>QA team (manual or automated)</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Launching the application to confirm it opens and basic navigation works.</p>\n<h3>6. <strong>Sanity\u00a0Testing</strong>\n</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>A focused form of testing to verify that a particular bug fix or feature update is working as intended.</p>\n<h4>\u2705 Performed by:</h4>\n<p>QA team</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>After fixing a login issue, testing only the login module to confirm the\u00a0fix.</p>\n<h3>7. <strong>Regression Testing</strong>\n</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>Re-running previous test cases to ensure that new changes haven\u2019t broken existing functionality.</p>\n<h4>\u2705 Performed by:</h4>\n<p>QA team (manual or automated)</p>\n<h4>\ud83d\udee0\ufe0f Tools:</h4>\n<p>Selenium, Katalon\u00a0Studio</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Testing shopping cart and checkout after updating the product listing\u00a0feature.</p>\n<h3>8. <strong>Performance Testing</strong>\n</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>This type evaluates how the application performs under different conditions like load and\u00a0stress.</p>\n<h4>\u2705 Performed by:</h4>\n<p>Performance testers</p>\n<h4>\ud83d\udee0\ufe0f Tools:</h4>\n<p>JMeter, LoadRunner, Gatling</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Testing how many users the website can handle before response time starts to\u00a0degrade.</p>\n<h3>9. Security\u00a0Testing</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>Ensures the application is secure from threats like data breaches, unauthorized access, and other vulnerabilities.</p>\n<h4>\u2705 Performed by:</h4>\n<p>Security testing specialists</p>\n<h4>\ud83d\udee0\ufe0f Tools:</h4>\n<p>OWASP ZAP, Burp\u00a0Suite</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Testing for SQL injection vulnerabilities in a login\u00a0form.</p>\n<h3>10. Usability Testing</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>Evaluates how user-friendly, intuitive, and accessible the application is.</p>\n<h4>\u2705 Performed by:</h4>\n<p>End users, designers, QA</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Observing users navigating an app to complete a task like booking a\u00a0flight.</p>\n<h3>11. Compatibility Testing</h3>\n<h4>\ud83d\udd0d What it\u00a0is:</h4>\n<p>Ensures the software works across different browsers, operating systems, and\u00a0devices.</p>\n<h4>\u2705 Performed by:</h4>\n<p>QA team</p>\n<h4>\ud83d\udee0\ufe0f Tools:</h4>\n<p>BrowserStack, CrossBrowserTesting</p>\n<h4>\ud83d\udca1 Example:</h4>\n<p>Testing a mobile app on Android and iOS devices to ensure consistent functionality.</p>\n<h3>Final Thoughts</h3>\n<p>Understanding the various types of software testing empowers QA professionals to apply the right technique at the right time. Each type plays a critical role in the overall quality assurance process\u200a\u2014\u200afrom catching bugs early to ensuring an excellent end-user experience.</p>\n<p>Whether you\u2019re building your career in QA or just looking to level up your testing knowledge, mastering these testing types is a great step\u00a0forward.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e72c25134265\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["automation-testing","security-testing","qa","manual-testing","test-automation"]},{"title":"Understanding the Software Testing Life Cycle (STLC)","pubDate":"2025-05-24 05:08:06","link":"https://medium.com/@yuwanirashipaba/understanding-the-software-testing-life-cycle-stlc-d9d31de6cfc4?source=rss-b546b55ffd16------2","guid":"https://medium.com/p/d9d31de6cfc4","author":"Yuwanirashipaba","thumbnail":"","description":"\n<blockquote><em>Quality assurance doesn\u2019t start when development ends\u200a\u2014\u200ait starts with a\u00a0plan.</em></blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*N9Zu-aYAsCRfCLuy1YfE_w.jpeg\"></figure><p>In the software world, testing isn\u2019t just a one-time task\u200a\u2014\u200ait\u2019s a <em>cycle</em>. The <strong>Software Testing Life Cycle (STLC)</strong> is a structured process that outlines a series of activities to ensure that software meets its intended requirements and quality standards.</p>\n<p>Whether you\u2019re a beginner entering the QA field or a developer trying to understand testing better, learning about the STLC can give you a clearer picture of how quality is built into every stage of software development.</p>\n<h3><strong>\ud83c\udf00 What is the STLC\u00a0?</strong></h3>\n<p>The <strong>Software Testing Life Cycle</strong> is a sequence of specific steps carried out during the testing process to ensure software quality goals are met. It begins even before the first line of code is written and continues after the application is deployed.</p>\n<p>Unlike the Software Development Life Cycle (SDLC), which focuses on building the software, the STLC is purely focused on validating and verifying it.</p>\n<h3>\ud83e\udde9 STLC Phases Explained</h3>\n<p>Here\u2019s a breakdown of each phase of the\u00a0STLC:</p>\n<ol>\n<li>Requirement Analysis</li>\n<li>Test Planning</li>\n<li>Test Case Development</li>\n<li>Test Environment Setup</li>\n<li>Test Execution</li>\n<li>Test Cycle\u00a0Closure</li>\n</ol>\n<h4>1\ufe0f\u20e3 Requirement Analysis</h4>\n<p>The <strong>first phase</strong> of the STLC is <strong>Requirement Analysis</strong>, where QA teams carefully examine the software requirements to understand what needs to be tested. This involves reviewing documents like the Software Requirement Specification (SRS) or Business Requirement Specification (BRS), identifying testable aspects, and seeking clarification on unclear or ambiguous requirements. The outcome is a clear understanding of the testing scope, along with documents like the Requirement Traceability Matrix\u00a0(RTM).</p>\n<h4>2\ufe0f\u20e3 Test\u00a0Planning</h4>\n<p>Next comes the <strong>Test Planning</strong> phase. In this stage, the test lead or QA manager prepares a detailed test plan outlining the testing strategy, tools to be used, resource requirements, effort estimation, schedules, and risk mitigation strategies. This plan serves as a roadmap for the entire testing process and ensures everyone involved understands their responsibilities and timelines.</p>\n<h4>3\ufe0f\u20e3 Test Case Development</h4>\n<p>Following this is the <strong>Test Case Development</strong> phase, where testers write detailed test cases and scripts based on the previously analyzed requirements. The goal is to cover all possible scenarios, both positive and negative, that the software might encounter in real-world usage. Simultaneously, test data is prepared to support these cases. All test cases are reviewed, validated, and approved before moving\u00a0forward.</p>\n<h4>4\ufe0f\u20e3 Test Environment Setup</h4>\n<p>The <strong>Test Environment Setup</strong> phase focuses on preparing the necessary infrastructure where tests will be executed. This includes setting up servers, databases, tools, networks, and other required components. In some organizations, this task is handled by a separate team. A smoke test is often conducted to ensure the environment is stable and ready for test execution.</p>\n<h4>5\ufe0f\u20e3 Test Execution</h4>\n<p>Once the environment is ready and test cases are in place, the process moves into the <strong>Test Execution</strong> phase. Testers begin executing the test cases and compare the actual results with the expected outcomes. Any discrepancies are reported as defects using a defect tracking system. Testers also perform re-testing and regression testing when bugs are fixed to ensure that the changes haven\u2019t introduced new\u00a0issues.</p>\n<h4>6\ufe0f\u20e3 Test Cycle\u00a0Closure</h4>\n<p>The final phase is <strong>Test Cycle Closure</strong>, where the testing team evaluates the entire testing process and documents the outcomes. This includes preparing a test summary report, gathering metrics like test coverage and defect density, and discussing what went well and what could be improved. Lessons learned are documented for future projects, and test artifacts are archived for reference.</p>\n<h3>\ud83d\udd01 STLC is Iterative</h3>\n<p>Testing isn\u2019t linear. As development progresses or changes are introduced, QA teams might revisit earlier stages like test case updates or new requirement analysis. That\u2019s what makes the STLC a <em>cycle</em>\u200a\u2014\u200ait adapts as the product\u00a0evolves.</p>\n<h3>\ud83d\udd0d Why STLC\u00a0Matters</h3>\n<ul>\n<li>\u2705 Encourages better planning and estimation.</li>\n<li>\u2705 Improves defect detection early in the\u00a0process.</li>\n<li>\u2705 Clarifies roles, responsibilities, and expectations.</li>\n<li>\u2705 Reduces costs by catching bugs\u00a0earlier.</li>\n<li>\u2705 Ensures better coverage and more confidence in releases.</li>\n</ul>\n<p>By understanding and following the Software Testing Life Cycle, QA professionals don\u2019t just find bugs\u200a\u2014\u200athey build confidence. A well-executed STLC ensures every release is not only functional, but dependable, setting the stage for better software and happier\u00a0users.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d9d31de6cfc4\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<blockquote><em>Quality assurance doesn\u2019t start when development ends\u200a\u2014\u200ait starts with a\u00a0plan.</em></blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*N9Zu-aYAsCRfCLuy1YfE_w.jpeg\"></figure><p>In the software world, testing isn\u2019t just a one-time task\u200a\u2014\u200ait\u2019s a <em>cycle</em>. The <strong>Software Testing Life Cycle (STLC)</strong> is a structured process that outlines a series of activities to ensure that software meets its intended requirements and quality standards.</p>\n<p>Whether you\u2019re a beginner entering the QA field or a developer trying to understand testing better, learning about the STLC can give you a clearer picture of how quality is built into every stage of software development.</p>\n<h3><strong>\ud83c\udf00 What is the STLC\u00a0?</strong></h3>\n<p>The <strong>Software Testing Life Cycle</strong> is a sequence of specific steps carried out during the testing process to ensure software quality goals are met. It begins even before the first line of code is written and continues after the application is deployed.</p>\n<p>Unlike the Software Development Life Cycle (SDLC), which focuses on building the software, the STLC is purely focused on validating and verifying it.</p>\n<h3>\ud83e\udde9 STLC Phases Explained</h3>\n<p>Here\u2019s a breakdown of each phase of the\u00a0STLC:</p>\n<ol>\n<li>Requirement Analysis</li>\n<li>Test Planning</li>\n<li>Test Case Development</li>\n<li>Test Environment Setup</li>\n<li>Test Execution</li>\n<li>Test Cycle\u00a0Closure</li>\n</ol>\n<h4>1\ufe0f\u20e3 Requirement Analysis</h4>\n<p>The <strong>first phase</strong> of the STLC is <strong>Requirement Analysis</strong>, where QA teams carefully examine the software requirements to understand what needs to be tested. This involves reviewing documents like the Software Requirement Specification (SRS) or Business Requirement Specification (BRS), identifying testable aspects, and seeking clarification on unclear or ambiguous requirements. The outcome is a clear understanding of the testing scope, along with documents like the Requirement Traceability Matrix\u00a0(RTM).</p>\n<h4>2\ufe0f\u20e3 Test\u00a0Planning</h4>\n<p>Next comes the <strong>Test Planning</strong> phase. In this stage, the test lead or QA manager prepares a detailed test plan outlining the testing strategy, tools to be used, resource requirements, effort estimation, schedules, and risk mitigation strategies. This plan serves as a roadmap for the entire testing process and ensures everyone involved understands their responsibilities and timelines.</p>\n<h4>3\ufe0f\u20e3 Test Case Development</h4>\n<p>Following this is the <strong>Test Case Development</strong> phase, where testers write detailed test cases and scripts based on the previously analyzed requirements. The goal is to cover all possible scenarios, both positive and negative, that the software might encounter in real-world usage. Simultaneously, test data is prepared to support these cases. All test cases are reviewed, validated, and approved before moving\u00a0forward.</p>\n<h4>4\ufe0f\u20e3 Test Environment Setup</h4>\n<p>The <strong>Test Environment Setup</strong> phase focuses on preparing the necessary infrastructure where tests will be executed. This includes setting up servers, databases, tools, networks, and other required components. In some organizations, this task is handled by a separate team. A smoke test is often conducted to ensure the environment is stable and ready for test execution.</p>\n<h4>5\ufe0f\u20e3 Test Execution</h4>\n<p>Once the environment is ready and test cases are in place, the process moves into the <strong>Test Execution</strong> phase. Testers begin executing the test cases and compare the actual results with the expected outcomes. Any discrepancies are reported as defects using a defect tracking system. Testers also perform re-testing and regression testing when bugs are fixed to ensure that the changes haven\u2019t introduced new\u00a0issues.</p>\n<h4>6\ufe0f\u20e3 Test Cycle\u00a0Closure</h4>\n<p>The final phase is <strong>Test Cycle Closure</strong>, where the testing team evaluates the entire testing process and documents the outcomes. This includes preparing a test summary report, gathering metrics like test coverage and defect density, and discussing what went well and what could be improved. Lessons learned are documented for future projects, and test artifacts are archived for reference.</p>\n<h3>\ud83d\udd01 STLC is Iterative</h3>\n<p>Testing isn\u2019t linear. As development progresses or changes are introduced, QA teams might revisit earlier stages like test case updates or new requirement analysis. That\u2019s what makes the STLC a <em>cycle</em>\u200a\u2014\u200ait adapts as the product\u00a0evolves.</p>\n<h3>\ud83d\udd0d Why STLC\u00a0Matters</h3>\n<ul>\n<li>\u2705 Encourages better planning and estimation.</li>\n<li>\u2705 Improves defect detection early in the\u00a0process.</li>\n<li>\u2705 Clarifies roles, responsibilities, and expectations.</li>\n<li>\u2705 Reduces costs by catching bugs\u00a0earlier.</li>\n<li>\u2705 Ensures better coverage and more confidence in releases.</li>\n</ul>\n<p>By understanding and following the Software Testing Life Cycle, QA professionals don\u2019t just find bugs\u200a\u2014\u200athey build confidence. A well-executed STLC ensures every release is not only functional, but dependable, setting the stage for better software and happier\u00a0users.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d9d31de6cfc4\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["quality-assurance","qa-testing","qa"]},{"title":"When you download an app and it just works, you rarely think about what went on behind the scenes.","pubDate":"2025-05-18 17:04:44","link":"https://medium.com/@yuwanirashipaba/when-you-download-an-app-and-it-just-works-you-rarely-think-about-what-went-on-behind-the-scenes-555f5cc7374b?source=rss-b546b55ffd16------2","guid":"https://medium.com/p/555f5cc7374b","author":"Yuwanirashipaba","thumbnail":"","description":"\n<h3><strong>What is Quality Assurance?</strong></h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*nrVdILRqUbMldYvetaoqEw.png\"><figcaption>What is Quality Assurance?</figcaption></figure><p>When you download an app and it <em>just works</em>, you rarely think about what went on behind the scenes. That smooth experience is often thanks to something called <strong>Quality Assurance (QA)</strong>.</p>\n<p>So, what exactly is QA, and why does it\u00a0matter?</p>\n<h3>A Simple Definition</h3>\n<p><strong>Quality Assurance</strong> is a systematic process of checking whether a product or service meets specified requirements and expectations. It\u2019s about <strong>preventing bugs before they happen</strong>, not just fixing them\u00a0after.</p>\n<p>Think of QA like a chef tasting dishes before they leave the kitchen. If something\u2019s off, they adjust before the plate reaches the customer. In software, this \u201ctasting\u201d is done through careful planning, testing, and\u00a0review.</p>\n<h3>QA vs. Testing\u200a\u2014\u200aNot the\u00a0Same!</h3>\n<p>People often confuse <strong>Quality Assurance</strong> with <strong>Testing</strong>, but they\u2019re different:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rQ34N12HcOkyrNFmEg8KvQ.png\"></figure><p>For example, writing clear coding standards and ensuring teams follow them is QA. Running test cases to find bugs is part of\u00a0testing.</p>\n<h4>Real-World Example</h4>\n<p>Let\u2019s say your team is building an e-commerce website.</p>\n<ul>\n<li>A QA engineer ensures all features\u200a\u2014\u200alike \u201cAdd to Cart\u201d\u200a\u2014\u200aare clearly documented, user flows make sense, and that developers follow best practices.</li>\n<li>Before release, the QA team tests on different devices and browsers to catch usability issues or\u00a0crashes.</li>\n<li>After spotting a bug that causes the cart to empty randomly, QA files it, the dev team fixes it, and QA verifies the fix before\u00a0launch.</li>\n</ul>\n<p>Without QA, that bug might\u2019ve caused you to lose sales and customer\u00a0trust.</p>\n<h4>Why QA\u00a0Matters</h4>\n<ol>\n<li>\n<strong>Cost-saving</strong>: According to IBM, fixing a bug after release can cost <strong>6x more</strong> than fixing it during development.</li>\n<li>\n<strong>User satisfaction</strong>: A bug-free app means happy users and positive\u00a0reviews.</li>\n<li>\n<strong>Brand reputation</strong>: Inconsistent or broken products can damage trust\u00a0quickly.</li>\n</ol>\n<p>Think of popular apps like Instagram or Spotify. Their seamless experience is no accident\u200a\u2014\u200ait\u2019s the result of rigorous QA processes.</p>\n<h4>Final Thoughts</h4>\n<p>Quality Assurance isn\u2019t just a phase\u200a\u2014\u200ait\u2019s a mindset. It involves <strong>everyone</strong>, from developers to product managers, all working toward one goal: <strong>a reliable, high-quality product</strong>.</p>\n<p>As technology evolves, the role of QA is becoming more crucial than ever, especially with trends like <strong>Test Automation</strong> and <strong>Agile Development</strong> shaping how we build and deliver software.</p>\n<p>So the next time your app runs flawlessly, remember: a good QA team probably had something to do with\u00a0it.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=555f5cc7374b\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3><strong>What is Quality Assurance?</strong></h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*nrVdILRqUbMldYvetaoqEw.png\"><figcaption>What is Quality Assurance?</figcaption></figure><p>When you download an app and it <em>just works</em>, you rarely think about what went on behind the scenes. That smooth experience is often thanks to something called <strong>Quality Assurance (QA)</strong>.</p>\n<p>So, what exactly is QA, and why does it\u00a0matter?</p>\n<h3>A Simple Definition</h3>\n<p><strong>Quality Assurance</strong> is a systematic process of checking whether a product or service meets specified requirements and expectations. It\u2019s about <strong>preventing bugs before they happen</strong>, not just fixing them\u00a0after.</p>\n<p>Think of QA like a chef tasting dishes before they leave the kitchen. If something\u2019s off, they adjust before the plate reaches the customer. In software, this \u201ctasting\u201d is done through careful planning, testing, and\u00a0review.</p>\n<h3>QA vs. Testing\u200a\u2014\u200aNot the\u00a0Same!</h3>\n<p>People often confuse <strong>Quality Assurance</strong> with <strong>Testing</strong>, but they\u2019re different:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rQ34N12HcOkyrNFmEg8KvQ.png\"></figure><p>For example, writing clear coding standards and ensuring teams follow them is QA. Running test cases to find bugs is part of\u00a0testing.</p>\n<h4>Real-World Example</h4>\n<p>Let\u2019s say your team is building an e-commerce website.</p>\n<ul>\n<li>A QA engineer ensures all features\u200a\u2014\u200alike \u201cAdd to Cart\u201d\u200a\u2014\u200aare clearly documented, user flows make sense, and that developers follow best practices.</li>\n<li>Before release, the QA team tests on different devices and browsers to catch usability issues or\u00a0crashes.</li>\n<li>After spotting a bug that causes the cart to empty randomly, QA files it, the dev team fixes it, and QA verifies the fix before\u00a0launch.</li>\n</ul>\n<p>Without QA, that bug might\u2019ve caused you to lose sales and customer\u00a0trust.</p>\n<h4>Why QA\u00a0Matters</h4>\n<ol>\n<li>\n<strong>Cost-saving</strong>: According to IBM, fixing a bug after release can cost <strong>6x more</strong> than fixing it during development.</li>\n<li>\n<strong>User satisfaction</strong>: A bug-free app means happy users and positive\u00a0reviews.</li>\n<li>\n<strong>Brand reputation</strong>: Inconsistent or broken products can damage trust\u00a0quickly.</li>\n</ol>\n<p>Think of popular apps like Instagram or Spotify. Their seamless experience is no accident\u200a\u2014\u200ait\u2019s the result of rigorous QA processes.</p>\n<h4>Final Thoughts</h4>\n<p>Quality Assurance isn\u2019t just a phase\u200a\u2014\u200ait\u2019s a mindset. It involves <strong>everyone</strong>, from developers to product managers, all working toward one goal: <strong>a reliable, high-quality product</strong>.</p>\n<p>As technology evolves, the role of QA is becoming more crucial than ever, especially with trends like <strong>Test Automation</strong> and <strong>Agile Development</strong> shaping how we build and deliver software.</p>\n<p>So the next time your app runs flawlessly, remember: a good QA team probably had something to do with\u00a0it.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=555f5cc7374b\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["testing","qa","quality-assurance"]}]}